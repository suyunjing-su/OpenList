name: Beta Release builds

on:
  push:
    branches: ["main"]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  changelog:
    name: Beta Release Changelog
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create or update ref
        id: create-or-update-ref
        uses: ovsds/create-or-update-ref-action@v1
        with:
          ref: tags/beta
          sha: ${{ github.sha }}

      - name: Delete beta tag
        run: git tag -d beta
        continue-on-error: true

      - name: changelog # or changelogithub@0.12 if ensure the stable result
        id: changelog
        run: |
          git tag -l
          npx changelogithub --output CHANGELOG.md

      - name: Upload assets to beta release
        uses: softprops/action-gh-release@v2
        with:
          body_path: CHANGELOG.md
          files: CHANGELOG.md
          prerelease: true
          tag_name: beta

      - name: Upload assets to github artifact
        uses: actions/upload-artifact@v4
        with:
          name: beta changelog
          path: ${{ github.workspace }}/CHANGELOG.md
          compression-level: 0
          if-no-files-found: error # 'warn' or 'ignore' are also available, defaults to `warn`

  release:
    needs:
      - changelog
    strategy:
      matrix:
        include:
          - target: "!(*musl*|*windows-arm64*|*windows-7*|*android*|*freebsd*)" # xgo and loongarch
            hash: "md5"
          - target: "linux-!(arm*)-musl*" #musl-not-arm
            hash: "md5-linux-musl"
          - target: "linux-arm*-musl*" #musl-arm
            hash: "md5-linux-musl-arm"
          - target: "windows-arm64" #win-arm64
            hash: "md5-windows-arm64"
          - target: "windows-7-*" #win7
            hash: "md5-windows-7"
          - target: "android-*" #android
            hash: "md5-android"
          - target: "freebsd-*" #freebsd
            hash: "md5-freebsd"

    name: Beta Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24.5"

      - name: Setup web
        run: bash build.sh dev web
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build (Win7)
        if: matrix.hash == 'md5-windows-7'
        run: |
          # Install MinGW-w64 cross-compilation toolchain for Win7 compatibility
          echo "Installing MinGW-w64 toolchain for Windows 7 compatibility..."
          sudo apt-get update
          sudo apt-get install -y gcc-mingw-w64-x86-64 gcc-mingw-w64-i686
          
          # Setup Win7 Go compiler (patched version that supports Windows 7)
          go_version=$(go version | grep -o 'go[0-9]\+\.[0-9]\+\.[0-9]\+' | sed 's/go//')
          echo "Detected Go version: $go_version"
          
          curl -fsSL --retry 3 -o go-win7.zip -H "Authorization: Bearer $GITHUB_TOKEN" \
            "https://github.com/XTLS/go-win7/releases/download/patched-${go_version}/go-for-win7-linux-amd64.zip"
          
          rm -rf go-win7
          unzip go-win7.zip -d go-win7
          rm go-win7.zip
          
          # Set permissions for wrapper files
          chmod +x ./wrapper/zcc-win7
          chmod +x ./wrapper/zcxx-win7
          chmod +x ./wrapper/zcc-win7-386
          chmod +x ./wrapper/zcxx-win7-386
          
          # Create build directory
          mkdir -p build
          
          # Build for both 386 and amd64 architectures
          for arch in "386" "amd64"; do
            echo "building for windows-7-${arch}"
            export GOOS=windows
            export GOARCH=${arch}
            export CGO_ENABLED=1
            
            # Use architecture-specific wrapper files
            if [ "$arch" = "386" ]; then
              export CC=$(pwd)/wrapper/zcc-win7-386
              export CXX=$(pwd)/wrapper/zcxx-win7-386
            else
              export CC=$(pwd)/wrapper/zcc-win7
              export CXX=$(pwd)/wrapper/zcxx-win7
            fi
            
            # Build with ldflags
            $(pwd)/go-win7/bin/go build -o "./build/openlist-windows-7-${arch}.exe" \
              -ldflags="-w -s \
                -X 'github.com/OpenListTeam/OpenList/v4/internal/conf.BuiltAt=$(date +'%F %T %z')' \
                -X 'github.com/OpenListTeam/OpenList/v4/internal/conf.GitAuthor=OpenList' \
                -X 'github.com/OpenListTeam/OpenList/v4/internal/conf.GitCommit=$(git log --pretty=format:\"%h\" -1)' \
                -X 'github.com/OpenListTeam/OpenList/v4/internal/conf.Version=beta' \
                -X 'github.com/OpenListTeam/OpenList/v4/internal/conf.WebVersion=dev'" \
              -tags=jsoniter .
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build (Other targets)
        if: matrix.hash != 'md5-windows-7'
        uses: OpenListTeam/cgo-actions@v1.2.2
        with:
          targets: ${{ matrix.target }}
          musl-target-format: $os-$musl-$arch
          github-token: ${{ secrets.GITHUB_TOKEN }}
          out-dir: build
          output: openlist-$target$ext
          musl-base-url: "https://github.com/OpenListTeam/musl-compilers/releases/latest/download/"
          x-flags: |
            github.com/OpenListTeam/OpenList/v4/internal/conf.BuiltAt=$built_at
            github.com/OpenListTeam/OpenList/v4/internal/conf.GitAuthor=OpenList
            github.com/OpenListTeam/OpenList/v4/internal/conf.GitCommit=$git_commit
            github.com/OpenListTeam/OpenList/v4/internal/conf.Version=$tag
            github.com/OpenListTeam/OpenList/v4/internal/conf.WebVersion=dev

      - name: Compress
        run: |
          bash build.sh zip ${{ matrix.hash }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # See above
      - name: Upload assets to beta release
        uses: softprops/action-gh-release@v2
        with:
          files: build/compress/*
          prerelease: true
          tag_name: beta

      - name: Clean illegal characters from matrix.target
        id: clean_target_name
        run: |
          ILLEGAL_CHARS_REGEX='[":<>|*?\\/\r\n]'
          CLEANED_TARGET=$(echo "${{ matrix.target }}" | sed -E "s/$ILLEGAL_CHARS_REGEX//g")
          echo "Original target: ${{ matrix.target }}"
          echo "Cleaned target: $CLEANED_TARGET"
          echo "cleaned_target=$CLEANED_TARGET" >> $GITHUB_ENV

      - name: Upload assets to github artifact
        uses: actions/upload-artifact@v4
        with:
          name: beta builds for ${{ env.cleaned_target }}
          path: ${{ github.workspace }}/build/compress/*
          compression-level: 0
          if-no-files-found: error # 'warn' or 'ignore' are also available, defaults to `warn`
